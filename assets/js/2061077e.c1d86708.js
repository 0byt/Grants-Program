"use strict";(self.webpackChunkgrants=self.webpackChunkgrants||[]).push([[36770],{33717:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>s,toc:()=>p});var n=a(87462),r=(a(67294),a(3905));a(8209);const o={},i="BPF-based ink! smart contracts",s={unversionedId:"docs/RFPs/bpf-contracts",id:"docs/RFPs/bpf-contracts",title:"BPF-based ink! smart contracts",description:"This Request for Proposals is closed, meaning we are not looking for any more proposals on this topic at the moment.",source:"@site/docs/RFPs/bpf-contracts.md",sourceDirName:"docs/RFPs",slug:"/docs/RFPs/bpf-contracts",permalink:"/docs/RFPs/bpf-contracts",draft:!1,editUrl:"https://github.com/w3f/Grants-Program/edit/master/docs/RFPs/bpf-contracts.md",tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"APPI: Auto-funded public P2P infrastructure",permalink:"/docs/RFPs/appi"},next:{title:"Candle auction smart contract",permalink:"/docs/RFPs/candle-auction"}},l={},p=[{value:"Project Description \ud83d\udcc4",id:"project-description-",level:2},{value:"eBPF as a WASM alternative",id:"ebpf-as-a-wasm-alternative",level:3},{value:"eBPF constraints",id:"ebpf-constraints",level:3},{value:"eBPF advantages",id:"ebpf-advantages",level:3},{value:"Previous work",id:"previous-work",level:3},{value:"Conclusion",id:"conclusion",level:3}],c={toc:p},m="wrapper";function d(e){let{components:t,...a}=e;return(0,r.kt)(m,(0,n.Z)({},c,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"bpf-based-ink-smart-contracts"},"BPF-based ink! smart contracts"),(0,r.kt)("admonition",{type:"danger"},(0,r.kt)("p",{parentName:"admonition"},"This Request for Proposals is ",(0,r.kt)("em",{parentName:"p"},"closed"),", meaning we are not looking for any more proposals on this topic at the moment.")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Status:")," ",(0,r.kt)("a",{parentName:"li",href:"https://forum.polkadot.network/t/ebpf-contracts-hackathon/1084/13?u=david"},"Closed")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Proposer:")," ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/takahser"},"takahser"))),(0,r.kt)("h2",{id:"project-description-"},"Project Description \ud83d\udcc4"),(0,r.kt)("p",null,"Substrate's ",(0,r.kt)("a",{parentName:"p",href:"https://docs.rs/crate/pallet-contracts/latest"},"FRAME contracts pallet")," allows for WASM-based smartcontracts on Substrate, written in ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/paritytech/ink"},"ink!"),", a Rust-based ",(0,r.kt)("a",{parentName:"p",href:"https://wiki.haskell.org/Embedded_domain_specific_language"},"eDSL"),". WASM comes with a lot of advantages, such as high flexibility, tooling, a good compiler (",(0,r.kt)("a",{parentName:"p",href:"%5Bhttps://xxxwasmtime%5D(https://github.com/bytecodealliance/wasmtime)"},"wasmtime"),") and a lot of high level constructs. However, these features comes with a cost: complexity of the API and compiler implementation as well as impacts on performance. For example, Substrate does not embed the API for WASM VM due to its complexity."),(0,r.kt)("h3",{id:"ebpf-as-a-wasm-alternative"},"eBPF as a WASM alternative"),(0,r.kt)("p",null,"An alternative to WASM here would be ",(0,r.kt)("a",{parentName:"p",href:"https://ebpf.io/"},"eBPF"),", a technology for running sandboxed programs in an operating system kernel. It originated from BSD's ",(0,r.kt)("a",{parentName:"p",href:"https://www.freebsd.org/cgi/man.cgi?bpf"},"BPF")," that comes with a ",(0,r.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Permissive_software_license#:~:text=A%20permissive%20software%20license%2C%20sometimes,usually%20including%20a%20warranty%20disclaimer."},"permissive")," open-source license and represents a Linux-compatible implementation thereof, that instead uses a ",(0,r.kt)("a",{parentName:"p",href:"https://www.lawinsider.com/dictionary/viral-open-source-license"},"viral")," open-source license."),(0,r.kt)("h3",{id:"ebpf-constraints"},"eBPF constraints"),(0,r.kt)("p",null,"However, vanilla eBPF has some serious constraints:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("a",{parentName:"li",href:"https://lld.llvm.org/"},"LLD")," can't link BPF code (LLD is the ",(0,r.kt)("a",{parentName:"li",href:"https://en.wikipedia.org/wiki/Linker_(computing)"},"linker")," contained in ",(0,r.kt)("a",{parentName:"li",href:"https://llvm.org/"},"LLVM")," which is the compiler framework that Rust's compiler ",(0,r.kt)("inlineCode",{parentName:"li"},"rustc")," relies on)."),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("inlineCode",{parentName:"li"},"rustup")," doesn't include any ",(0,r.kt)("inlineCode",{parentName:"li"},"core")," nor ",(0,r.kt)("inlineCode",{parentName:"li"},"std")," library for LLVM (and rustc)'s a upstream BPF targets (",(0,r.kt)("inlineCode",{parentName:"li"},"bpfeb-unknown-none")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"bpfel-unknown-none"),")"),(0,r.kt)("li",{parentName:"ol"},"Loops are ",(0,r.kt)("a",{parentName:"li",href:"https://lwn.net/Articles/740157/"},"not fully supported"),".")),(0,r.kt)("p",null,"While 1) and 2) technically can be worked around by using ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/aya-rs/bpf-linker"},"bpf-linker"),", 3) needs further research. Also, 2) will only work if loops are bound statically due to constraints within the LLVM backend. A viable solution here would be to replace this constraint by using ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/paritytech/wasm-instrument/blob/b51701088e3d4f13b77047237a2480b488e6d099/src/gas_metering/mod.rs#L108"},"gas metering"),"."),(0,r.kt)("h3",{id:"ebpf-advantages"},"eBPF advantages"),(0,r.kt)("p",null,"Despite the constraints, eBPF-based ink! smart contracts would be expected to have the following advantages over its WASM-based counterpart:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Simplicity: Due to its register-based instruction set it would be easier to compile"),(0,r.kt)("li",{parentName:"ul"},"Efficiency and performance")),(0,r.kt)("h3",{id:"previous-work"},"Previous work"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://forum.polkadot.network/u/Alex"},"Alex")," and ",(0,r.kt)("a",{parentName:"p",href:"https://forum.polkadot.network/u/pepyakin"},"pepyakin")," have attempted to use eBPF instead of WASM for ink! smart contracts when attending a hackathon. While they didn't manage to compile to BPF, their resources might be useful as a starting point:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"eBPF contracts ",(0,r.kt)("a",{parentName:"li",href:"https://forum.polkadot.network/t/ebpf-contracts-hackathon/1084/3"},"hack report")),(0,r.kt)("li",{parentName:"ul"},"Version of ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/pepyakin/substrate-seal-ebpf"},"pallet-contracts that can run eBPF contracts")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/athei/bpf-adder"},"Example contract"))),(0,r.kt)("h3",{id:"conclusion"},"Conclusion"),(0,r.kt)("p",null,"The goal of this RFP is to allow for eBPF-based smart contracts.\nTo summarize, the rough process should be:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Compile Rust-based ink! smart contracts using ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/qmonnet/rbpf"},"rBPF"),", returning an ",(0,r.kt)("em",{parentName:"li"},"eBPF ELF file")),(0,r.kt)("li",{parentName:"ol"},"Store the ELF file on-chain"),(0,r.kt)("li",{parentName:"ol"},"Execute the ELF file within the eBPF VM that will convert it to machine code")))}d.isMDXComponent=!0}}]);